import streamlit as st
import Libs as glib
import time

st.set_page_config(
    page_title="Edurich",
    page_icon="üåç",
    layout="centered"
)

# Sidebar ch·ªçn model
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh AI")
    selected_model = st.selectbox(
        "Ch·ªçn phi√™n b·∫£n AI:",
        options=[
            "gpt-4.5-preview-2025-02-27",
            "o3-mini-2025-01-31",
            "gpt-4o-2024-08-06",
            "o1-mini-2024-09-12",
            "gpt-4-turbo-2024-04-09"
        ],
        index=2,
        help="Ch·ªçn c√°c model kh√°c nhau ƒë·ªÉ so s√°nh ch·∫•t l∆∞·ª£ng tr·∫£ l·ªùi"
    )
    st.markdown("---")
    st.caption("‚ÑπÔ∏è Model m·∫°nh h∆°n cho k·∫øt qu·∫£ ch√≠nh x√°c h∆°n nh∆∞ng t·ªën nhi·ªÅu token h∆°n")

# Kh·ªüi t·∫°o session state
if 'messages' not in st.session_state:
    st.session_state.messages = []
    st.session_state.has_greeted = False

# Hi·ªÉn th·ªã l·ªùi ch√†o ban ƒë·∫ßu
if len(st.session_state.messages) == 0 and not st.session_state.has_greeted:
    greeting_text = "Xin ch√†o, em l√† chatbot AI t∆∞ v·∫•n, h·ªó tr·ª£ anh/ch·ªã v·ªÅ kh√≥a h·ªçc tr√™n n·ªÅn t·∫£ng Edurich.vn"
    with st.chat_message("assistant"):
        def stream_greeting():
            for char in greeting_text:
                yield char
                time.sleep(0.03)
        st.write_stream(stream_greeting())
        st.session_state.messages.append({"role": "assistant", "content": greeting_text})
        st.session_state.has_greeted = True

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for msg in st.session_state.messages[1:]:  # B·ªè qua l·ªùi ch√†o ƒë·∫ßu
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"], unsafe_allow_html=True)

# X·ª≠ l√Ω input
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    
    with st.chat_message("user"):
        st.markdown(prompt, unsafe_allow_html=True)
    
    with st.chat_message("assistant"):
        response_box = st.empty()
        full_response = []
        
        is_first = len([m for m in st.session_state.messages if m['role'] == 'user']) == 1
        
        try:
            for chunk in glib.search_travelwith_fnb(
                prompt,
                st.session_state.messages[:-1],
                is_first=is_first,
                model_name=selected_model  # Truy·ªÅn model ƒë∆∞·ª£c ch·ªçn
            ):
                full_response.append(chunk)
                current_text = "".join(full_response)
                response_box.markdown(current_text + "‚ñå", unsafe_allow_html=True)
                time.sleep(0.02)
            
            response_box.markdown(current_text, unsafe_allow_html=True)
            st.session_state.messages.append({"role": "assistant", "content": current_text})
            
        except Exception as e:
            error_msg = "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau."
            response_box.markdown(error_msg)
            st.session_state.messages.append({"role": "assistant", "content": error_msg})